// SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
// SPDX-License-Identifier: MIT
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Smdn.Reflection;

internal static class EventInfoBackingFieldExtensions {
  public static FieldInfo? GetBackingField(this EventInfo ev)
  {
    if (ev is null)
      throw new ArgumentNullException(nameof(ev));

    var isAccessorAutoGenerated =
      ev.AddMethod?.GetCustomAttribute<CompilerGeneratedAttribute>() is not null ||
      ev.RemoveMethod?.GetCustomAttribute<CompilerGeneratedAttribute>() is not null;

    if (!isAccessorAutoGenerated)
      return null;

    if (ev.DeclaringType is null)
      return null; // or throw exception?

    var backingField = ev.DeclaringType.GetField(
      name: ev.Name, // XXX: undocumented spec
      bindingAttr: (ev.IsStatic() ? BindingFlags.Static : BindingFlags.Instance) | BindingFlags.NonPublic
    );

    return backingField?.GetCustomAttribute<CompilerGeneratedAttribute>() is null
      ? null
      : backingField;
  }
}
