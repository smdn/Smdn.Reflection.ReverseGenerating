// SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
// SPDX-License-Identifier: MIT
using System;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Smdn.Reflection;

internal static class PropertyInfoBackingFieldExtensions {
  public static FieldInfo? GetBackingField(this PropertyInfo property)
  {
    if (property is null)
      throw new ArgumentNullException(nameof(property));

    var isAccessorAutoGenerated =
      property.GetMethod?.GetCustomAttribute<CompilerGeneratedAttribute>() is not null ||
      property.SetMethod?.GetCustomAttribute<CompilerGeneratedAttribute>() is not null;

    if (!isAccessorAutoGenerated)
      return null;

    if (property.DeclaringType is null)
      return null; // or throw exception?

    var backingField = property.DeclaringType.GetField(
      name: "<" + property.Name + ">k__BackingField", // XXX: undocumented spec
      bindingAttr: (property.IsStatic() ? BindingFlags.Static : BindingFlags.Instance) | BindingFlags.NonPublic
    );

    return backingField?.GetCustomAttribute<CompilerGeneratedAttribute>() is null
      ? null
      : backingField;
  }
}
