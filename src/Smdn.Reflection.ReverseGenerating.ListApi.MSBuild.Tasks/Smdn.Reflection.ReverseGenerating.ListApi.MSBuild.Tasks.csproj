<!--
SPDX-FileCopyrightText: 2021 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net6.0;net5.0;netcoreapp3.1</TargetFrameworks>
    <RootNamespace>Smdn.Reflection.ReverseGenerating.ListApi.MSBuild.Tasks</RootNamespace>
    <VersionPrefix>1.1.0</VersionPrefix>
    <VersionSuffix></VersionSuffix>
    <Nullable>enable</Nullable>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <GeneratePackageReadmeFile>false</GeneratePackageReadmeFile>
  </PropertyGroup>

  <PropertyGroup Label="packaging">
    <PackageValidationBaselineVersion>1.0.1</PackageValidationBaselineVersion>
    <!-- <NoPackageAnalysis>true</NoPackageAnalysis> -->
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GenerateTaskFiles;PopulateDependingAssembliesToPackage</TargetsForTfmSpecificContentInPackage>
    <BeforePack>GenerateMSBuildTargetsFile;$(BeforePack)</BeforePack>
    <DevelopmentDependency>true</DevelopmentDependency>
    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    <!--
      Needs alternative of nuget.exe's -IncludeReferencedProjects option: https://github.com/NuGet/Home/issues/3891
      Here, we use workaround 'PopulateDependingAssembliesToPackage' target instead.
    -->
    <!-- <IncludeReferencedProjects>true</IncludeReferencedProjects> -->
    <NoWarn>$(NoWarn);NU5100;NU5128</NoWarn>
  </PropertyGroup>

  <PropertyGroup Label="assembly attributes">
    <Description>MSBuild tasks for reverse generating API lists from assemblies.</Description>
    <CopyrightYear>2021</CopyrightYear>
  </PropertyGroup>

  <PropertyGroup Label="package properties">
    <PackageTags>reflection;reverse-generating;reverse-generation;generator;api-list;msbuild-task</PackageTags>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.0.0" PrivateAssets="All" />
    <ProjectReference VersionRange="[1.1.0,2.0.0)" Include="..\Smdn.Reflection.ReverseGenerating.ListApi.Core\Smdn.Reflection.ReverseGenerating.ListApi.Core.csproj" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <ExportTaskNames Include="GenerateApiList">
      <Namespace>Smdn.Reflection.ReverseGenerating.ListApi.MSBuild.Tasks</Namespace>
    </ExportTaskNames>
  </ItemGroup>

  <Target Name="GenerateTaskFiles" Condition=" '$(TargetFramework)' != '' ">
    <GenerateTaskFile
      TaskName="%(ExportTaskNames.Identity)"
      TaskNamespace="%(ExportTaskNames.Namespace)"
      TaskAssemblyFile="$(AssemblyName).dll"
      OutputDirectory="$(OutputPath)"
    >
      <Output PropertyName="GeneratedTaskFile" TaskParameter="GeneratedFile" />
    </GenerateTaskFile>

    <ItemGroup>
      <TfmSpecificPackageFile Include="$(GeneratedTaskFile)" PackagePath="$(BuildOutputTargetFolder)\$(TargetFramework)" />
    </ItemGroup>
  </Target>

  <UsingTask
    TaskName="GenerateTaskFile"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
  >
    <ParameterGroup>
      <TaskName ParameterType="System.String" Required="true" />
      <TaskNamespace ParameterType="System.String" />
      <TaskAssemblyFile ParameterType="System.String" Required="true" />
      <OutputDirectory ParameterType="System.String" Required="true" />
      <GeneratedFile ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        const string PropertyMSBuildThisFileDirectory = "\x24(MSBuildThisFileDirectory)";
        var path = Path.Combine(OutputDirectory, $"{TaskName}.task");
        var taskFullName = string.IsNullOrEmpty(TaskNamespace)
          ? TaskName
          : $"{TaskNamespace}.{TaskName}";
        var contents =
 @$"<Project>
  <UsingTask
    TaskName=""{taskFullName}""
    AssemblyFile=""{PropertyMSBuildThisFileDirectory}{TaskAssemblyFile}""
  />
</Project>
";

        File.WriteAllText(path, contents);

        GeneratedFile = path;
      ]]></Code>
    </Task>
  </UsingTask>

  <!--
    alternative of nuget.exe's -IncludeReferencedProjects option
    https://github.com/NuGet/Home/issues/3891

    other workarounds:
      https://github.com/NuGet/Home/issues/3891#issuecomment-569491001
      https://github.com/NuGet/Home/issues/3891#issuecomment-377319939
  -->
  <Target Name="PopulateDependingAssembliesToPackage">
    <ItemGroup>
      <TfmSpecificPackageFile
        Include="$(OutputPath)\*.dll"
        Exclude="$(OutputPath)\$(AssemblyName).dll"
        PackagePath="$(BuildOutputTargetFolder)\$(TargetFramework)\"
      />
    </ItemGroup>
  </Target>

  <Target
    Name="GenerateMSBuildTargetsFile"
    DependsOnTargets="GenerateTaskFiles"
  >
    <ItemGroup>
      <TaskTargetFrameworks Include="$(TargetFrameworks.Split(';'))" />
      <TaskFiles
        Include="@(ExportTaskNames)"
        TargetFramework="%(TaskTargetFrameworks.Identity)"
      />
      <TaskFiles
        ImportLine="&lt;Import Project=&quot;..\$(BuildOutputTargetFolder)\%(TargetFramework)\%(Identity).task&quot; /&gt;"
      />
    </ItemGroup>

    <PropertyGroup>
      <GenerateMSBuildTargetsFileOutputPath>$(OutputPath)\$(AssemblyName).targets</GenerateMSBuildTargetsFileOutputPath>
      <!-- TODO: MSBuildRuntimeType == Full, Mono and otherwise -->
      <GenerateMSBuildTargetsFileLines><![CDATA[
<Project>
  <ImportGroup Condition=" '%24(MSBuildRuntimeType)' == 'Core' and %24([System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription.StartsWith('.NET Core 3.')) ">
    <!-- .NET Core 3.x -->
    @(TaskFiles->WithMetadataValue('TargetFramework', 'netcoreapp3.1')->'%(ImportLine)', '%0D%0A    ')
  </ImportGroup>
  <ImportGroup Condition=" '%24(MSBuildRuntimeType)' == 'Core' and %24([System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription.StartsWith('.NET 5.')) ">
    <!-- .NET 5.x -->
    @(TaskFiles->WithMetadataValue('TargetFramework', 'net5.0')->'%(ImportLine)', '%0D%0A    ')
  </ImportGroup>
  <ImportGroup Condition=" '%24(MSBuildRuntimeType)' == 'Core' and %24([System.Runtime.InteropServices.RuntimeInformation]::FrameworkDescription.StartsWith('.NET 6.')) ">
    <!-- .NET 6.x -->
    @(TaskFiles->WithMetadataValue('TargetFramework', 'net6.0')->'%(ImportLine)', '%0D%0A    ')
  </ImportGroup>
</Project>
      ]]></GenerateMSBuildTargetsFileLines>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(GenerateMSBuildTargetsFileOutputPath)"
      Lines="$(GenerateMSBuildTargetsFileLines)"
      Overwrite="true"
      Encoding="UTF-8"
    />

    <ItemGroup>
      <None Pack="true" Include="$(GenerateMSBuildTargetsFileOutputPath)" PackagePath="buildMultitargeting" />
    </ItemGroup>
  </Target>
</Project>
